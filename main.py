# -*- coding: utf-8 -*-
import os
import re
import sys
import urllib.request as urllib2
import textes.news_vk as news
import telebot
from telebot import apihelper
from telebot import types

import config

path = os.path.dirname(__file__)



apihelper.proxy = config.proxy
bot = telebot.TeleBot(config.token)

user_dict = {}


class User:
    def __init__(self, name):
        self.name = name
        self.age = None
        self.sex = None


def log(message, answer):
    print("\n --------")
    from datetime import datetime
    print(datetime.now())
    print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {0} {1}. (id = {2}) \n –¢–µ–∫—Å—Ç - {3}".format(
        message.from_user.first_name,
        message.from_user.last_name,
        str(message.from_user.id),
        message.text
    ))
    print(answer)


class CustomFunctions(object):
    @staticmethod
    def generate_start_menu_buttons():
        keyboard = types.InlineKeyboardMarkup()
        url_button1 = types.InlineKeyboardButton(text="üçΩ –ú–µ–Ω—é", callback_data="show_menu")
        url_button2 = types.InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")
        url_button3 = types.InlineKeyboardButton(text="üì¢ –ù–æ–≤–æ—Å—Ç–∏", callback_data="show_news")
        url_button4 = types.InlineKeyboardButton(text="üì© –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="show_contacts")
        url_button5 = types.InlineKeyboardButton(text="üöÄ –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="show_delivery")
        keyboard.add(url_button1, url_button2, url_button3, url_button4, url_button5)
        return keyboard

    @staticmethod
    def start_menu(message, *args, **kwargs):
        try:
            keyboard = CustomFunctions.generate_start_menu_buttons()
            result = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\r\n–í—ã–±–µ—Ä–∏—Ç–µ üå∂Ô∏è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏ —è –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É " \
                     "–≤–∞–º üëá"
            if 'custom_text' in kwargs:
                result = kwargs['custom_text']

            bot.send_message(message.chat.id, result,
                             reply_markup=keyboard)
        except Exception as e:
            bot.reply_to(message, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')

    @staticmethod
    def back_start_menu(message):
        try:
            keyboard = CustomFunctions.generate_start_menu_buttons()
            result = "–í—ã–±–µ—Ä–∏—Ç–µ üå∂Ô∏è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏ —è –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É " \
                     "–≤–∞–º üëá"

            bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                                  text=result, reply_markup=keyboard)
        except Exception as e:
            bot.reply_to(message, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')

    @staticmethod
    def generate_keyboard_menu_selector():
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        url_button1 = types.InlineKeyboardButton(text="–§–∏—Ä–º–µ–Ω–Ω—ã–µ –ø–∏—Ü—Ü—ã", callback_data="pizzas")
        url_button2 = types.InlineKeyboardButton(text="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø–∏—Ü—Ü—ã", callback_data="classic_pizza")
        url_button3 = types.InlineKeyboardButton(text="–ó–∞–∫—É—Å–∫–∏", callback_data="snacks")
        url_button4 = types.InlineKeyboardButton(text="–î–µ—Å–µ—Ä—Ç—ã –∏ –Ω–∞–ø–∏—Ç–∫–∏", callback_data="desert")
        url_button5 = types.InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back_start_menu")
        keyboard.add(url_button1, url_button2, url_button3, url_button4, url_button5)
        return keyboard

    @staticmethod
    def show_menu(message, *args, **kwargs):
        if 'result' in kwargs:
            result = kwargs['result']
        else:
            result = "–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üëá"

        if 'bot_func' in args:
            bot_func = kwargs['bot_func']
        else:
            bot_func = 'edit_message_text'
        keyboard = CustomFunctions.generate_keyboard_menu_selector()
        bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                              text=result, reply_markup=keyboard)

    @staticmethod
    def new_show_menu(message, *args, **kwargs):
        if 'result' in kwargs:
            result = kwargs['result']
        else:
            result = "–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üëá"
        keyboard = CustomFunctions.generate_keyboard_menu_selector()
        bot.send_message(message.chat.id, result,
                         reply_markup=keyboard)

    @staticmethod
    def draw_menu_from_file(message, file_in, old_message=""):
        try:
            with open(path + "/textes/" + file_in, mode="r", encoding="utf-8") as f:
                file = f.read().split('-----')
            # ReplyKeyboardRemove: —Å–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–∏–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∫—É
            # Takes an optional selective argument (True/False, default False)
            message_id = message.message_id
            markup = types.ReplyKeyboardRemove(selective=False)

            for idx, i in enumerate(file):
                math = re.search(re.escape('![image]') + "(.*?)" + re.escape('[image]!'), str(i))
                if math:
                    url = math.group(0).replace("![image]", "").replace("[image]!", "")
                    image_name = "url_image_{0}.jpg".format(idx)
                    urllib2.urlretrieve(url, image_name)
                    img = open(image_name, 'rb')
                    bot.send_chat_action(message.chat.id, 'upload_photo')
                    result = i.replace(math.group(0), "")
                    bot.send_photo(message.chat.id, img, caption=result)
                    img.close()
                else:
                    bot.send_message(chat_id=message.chat.id, text=i, reply_markup=markup, parse_mode="Markdown")
            if old_message and not old_message.isspace():
                bot.edit_message_text(chat_id=message.chat.id, message_id=message_id,
                                      text=old_message)
            else:
                bot.delete_message(message.chat.id, message_id)
            CustomFunctions.new_show_menu(message, result="–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?")
        except Exception as e:
            print('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
            print(e)
            bot.reply_to(message, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')


# –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ —Ä–∞–∑–±–∏—Ç—å —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
    message = call.message
    if call.message:
        if call.data == "show_menu":
            CustomFunctions.show_menu(message)

        elif call.data == "show_cart":
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤")
        elif call.data == "show_news":
            nn = news.generate_news_from_vk()
            bot.edit_message_text(chat_id=message.chat.id, message_id=call.message.message_id,
                                  text="–ù–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:")
            for i in nn:
                bot.send_message(chat_id=message.chat.id, text=i)
            CustomFunctions.start_menu(message, custom_text="–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?")
        elif call.data == "back_start_menu":
            CustomFunctions.back_start_menu(message)
        elif call.data == "pizzas":
            CustomFunctions.draw_menu_from_file(message, 'pizzas.txt', '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –§–∏—Ä–º–µ–Ω–Ω—ã—Ö –ø–∏—Ü—Ü')
        elif call.data == "classic_pizza":
            CustomFunctions.draw_menu_from_file(message, 'classic_pizza.txt', '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –ø–∏—Ü—Ü')
        elif call.data == "snacks":
            CustomFunctions.draw_menu_from_file(message, 'snacks.txt', '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∑–∞–∫—É—Å–æ–∫')
        elif call.data == "desert":
            CustomFunctions.draw_menu_from_file(message, 'desert.txt', '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –î–µ—Å–µ—Ä—Ç—ã –∏ –Ω–∞–ø–∏—Ç–∫–∏')
        elif call.data == "show_contacts":
            bot.edit_message_text(chat_id=message.chat.id, message_id=call.message.message_id,
                                  text="–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:")
            result = """‚òé +7 951 577 32 52
üìß chekpointpizza@gmail.com
üåê www.chekpointpizza.ru
üíô vk.com/chekpointpizza
üì∑ instagram.com/chekpointpizza
üåè [2gis.ru](https://2gis.ru/sheregesh/firm/70000001033499892%2C87.979068%2C52.926753?queryState=center%2F87.979487%2C52.926435%2Fzoom%2F18) 
#chekpointpizza
"""
            bot.send_message(chat_id=message.chat.id, text=result, disable_web_page_preview='True', parse_mode="Markdown")
            # sendLocation 52.9254244,87.9768591,17
            bot.send_location(message.chat.id, 52.92675047761759, 87.97900583928678)
            CustomFunctions.start_menu(message, custom_text="–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?")
        elif call.data == "show_delivery":
            bot.edit_message_text(chat_id=message.chat.id, message_id=call.message.message_id,
                                  text="–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
            result = """–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞: 
–ü–ì–¢ –®–µ—Ä–µ–≥–µ—à üèò –≥. –ó–µ–ª–µ–Ω–∞—è üèî

–ó–∞–±—Ä–∞—Ç—å –ø–∏—Ü—Ü—É —Å–æ —Å–∫–∏–¥–∫–æ–π *15%* –º–æ–∂–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: _–®–µ—Ä–µ–≥–µ—à, —É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è 13_
–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¢–∞—à—Ç–∞–≥–æ–ª–∞ +200 —Ä—É–±–ª–µ–π –∫ –∑–∞–∫–∞–∑—É. 
–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:
*–ï–∂–µ–¥–Ω–µ–≤–Ω–æ* —Å 11:00- 22:00            
"""
            bot.send_message(chat_id=message.chat.id, text=result, disable_web_page_preview='True', parse_mode="Markdown")
            CustomFunctions.start_menu(message, custom_text="–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?")
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
    elif call.inline_message_id:
        if call.data == "show_cart":
            bot.edit_message_text(chat_id=call.message.chat.id, inline_message_id=call.inline_message_id,
                                  text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤")


@bot.message_handler(commands=['start', 'contacts'])
def handle_text(message):
    command = message.text
    if command == '/start':
        CustomFunctions.start_menu(message)


@bot.message_handler(content_types=['text'])
def handle_text(message):
    result = "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–æ –º—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É /start"
    bot.send_message(message.chat.id, result)


bot.polling(none_stop=True, interval=0)
